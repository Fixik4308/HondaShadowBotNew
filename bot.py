# ============================
# bot.py
# ============================

"""
‚úÖ Telegram-–±–æ—Ç –¥–ª—è HondaShadow ESP32
‚úÖ –ß–∏—Ç–∞—î –¥–∞–Ω—ñ –∑ data.json
‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ ESP32 –æ—Ñ–ª–∞–π–Ω
‚úÖ –ö–µ—Ä—É—î ESP32 —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–∏
‚úÖ –ü—ñ–¥—Ç—Ä–∏–º—É—î PIN
‚úÖ –ê–≤—Ç–æ-–∑–≤—ñ—Ç –≤—Ä–∞–Ω—Ü—ñ
"""

import json
import requests
import asyncio
import logging
from datetime import datetime, time as dtime

from telegram import (
    ReplyKeyboardMarkup, KeyboardButton,
    Update, KeyboardButtonPollType
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# ============ –ó–ê–ì–†–£–ó–ö–ê –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨ ============
with open("config.json") as f:
    CONFIG = json.load(f)

TELEGRAM_TOKEN = CONFIG["TELEGRAM_TOKEN"]
PIN_CODE = CONFIG["PIN_CODE"]
OPENWEATHER_API_KEY = CONFIG["OPENWEATHER_API_KEY"]
CITY = CONFIG["CITY"]
ADMIN_CHAT_ID = int(CONFIG["ADMIN_CHAT_ID"])

DATA_FILE = "data.json"

# ============ –§–£–ù–ö–¶–Ü–á –î–ê–ù–ò–• ============
def load_data():
    try:
        with open(DATA_FILE) as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

# ============ –ö–ù–û–ü–ö–ò ============
def main_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton("‚õΩ –ó–∞–ª–∏—à–æ–∫")],
        [KeyboardButton("üõ¢ –ó–∞–ø—Ä–∞–≤–∏–≤—Å—è"), KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞")],
        [KeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è"), KeyboardButton("üß∞ –¢–û")]
    ], resize_keyboard=True)

def control_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üîë –£–≤—ñ–º–∫–Ω—É—Ç–∏ –∑–∞–ø–∞–ª–µ–Ω–Ω—è"), KeyboardButton("üóù –ó–∞–≤–µ—Å—Ç–∏ –¥–≤–∏–≥—É–Ω")],
        [KeyboardButton("üõë –ó–∞–≥–ª—É—à–∏—Ç–∏ –¥–≤–∏–≥—É–Ω"), KeyboardButton("üö´ –í–∏–º–∫–Ω—É—Ç–∏ –∑–∞–ø–∞–ª–µ–Ω–Ω—è")],
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)

def service_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚ÑπÔ∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")],
        [KeyboardButton("‚úÖ –ó–º–∞—Å—Ç–∏–≤ —Ü–µ–ø"), KeyboardButton("‚úÖ –ó–∞–º—ñ–Ω–∏–≤ –º–∞—Å–ª–æ")],
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)

# ============ –ö–û–ú–ê–ù–î–ò ============
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ñ—Ç–∞—é! –Ø HondaShadow ESP32 –±–æ—Ç. –û–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É:",
        reply_markup=main_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/status - –°—Ç–∞—Ç—É—Å\n"
        "/location - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏\n"
        "/refuel X - –¥–æ–¥–∞—Ç–∏ X –ª—ñ—Ç—Ä—ñ–≤\n"
        "/service_oil_reset - —Å–∫–∏–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –º–∞—Å–ª–∞\n"
        "/service_chain_reset - —Å–∫–∏–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ª–∞–Ω—Ü—é–≥–∞\n"
        "/ignite - –£–≤—ñ–º–∫–Ω—É—Ç–∏ –∑–∞–ø–∞–ª–µ–Ω–Ω—è (–∑ PIN)\n"
        "/starter - –°—Ç–∞—Ä—Ç–µ—Ä (–∑ PIN)\n"
        "/stop - –í–∏–º–∫–Ω—É—Ç–∏ –∑–∞–ø–∞–ª–µ–Ω–Ω—è/—Å—Ç–∞—Ä—Ç–µ—Ä\n"
        "/help - —Ü–µ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    offline = "‚úÖ ESP32 ONLINE" if data.get("last_update") else "‚ùå ESP32 OFFLINE"
    msg = (
        f"{offline}\n\n"
        f"üå°Ô∏è –¢–µ–º–ø. –¥–≤–∏–≥—É–Ω–∞: {data.get('engine_temperature','–Ω/–¥')} ¬∞C\n"
        f"üå§Ô∏è –¢–µ–º–ø. –ø–æ–≤—ñ—Ç—Ä—è: {data.get('air_temperature','–Ω/–¥')} ¬∞C\n"
        f"‚õΩ –ó–∞–ª–∏—à–æ–∫: {data.get('fuel_liters','–Ω/–¥')} –ª\n"
        f"üíß –°–µ—Ä–µ–¥–Ω—è –≤–∏—Ç—Ä–∞—Ç–∞: {data.get('average_consumption','–Ω/–¥')} –ª/100–∫–º\n"
        f"üöÄ –ó–∞–ø–∞—Å —Ö–æ–¥—É: {data.get('range_km','–Ω/–¥')} –∫–º\n"
        f"üìç –ü—Ä–æ–±—ñ–≥ —Å–µ—Å—ñ—ó: {data.get('session_distance','–Ω/–¥')} –∫–º\n"
        f"üõ£Ô∏è –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–±—ñ–≥: {data.get('total_distance','–Ω/–¥')} –∫–º"
    )
    await update.message.reply_text(msg, reply_markup=main_keyboard())

    if data.get("latitude") and data.get("longitude"):
        await context.bot.send_location(
            chat_id=update.effective_chat.id,
            latitude=data["latitude"],
            longitude=data["longitude"]
        )

async def location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    if data.get("latitude") and data.get("longitude"):
        await context.bot.send_location(
            chat_id=update.effective_chat.id,
            latitude=data["latitude"],
            longitude=data["longitude"]
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.")

async def refuel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π —Ç–∞–∫: /refuel 5")
        return
    try:
        liters = float(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!")
        return

    data = load_data()
    data["fuel_liters"] = data.get("fuel_liters", 0) + liters
    save_data(data)
    await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ {liters} –ª!", reply_markup=main_keyboard())

async def service_oil_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    data["service_oil"] = 0
    save_data(data)
    await update.message.reply_text("‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –º–∞—Å–ª–∞ —Å–∫–∏–Ω—É—Ç–æ!", reply_markup=main_keyboard())

async def service_chain_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    data["service_chain"] = 0
    save_data(data)
    await update.message.reply_text("‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ª–∞–Ω—Ü—é–≥–∞ —Å–∫–∏–Ω—É—Ç–æ!", reply_markup=main_keyboard())

async def ignite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1 or context.args[0] != PIN_CODE:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π PIN!")
        return
    data = load_data()
    data["last_command"] = "start_ignition"
    save_data(data)
    await update.message.reply_text("‚úÖ –ó–∞–ø–∞–ª–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ!", reply_markup=main_keyboard())

async def starter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1 or context.args[0] != PIN_CODE:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π PIN!")
        return
    data = load_data()
    data["last_command"] = "start_starter"
    save_data(data)
    await update.message.reply_text("‚úÖ –°—Ç–∞—Ä—Ç–µ—Ä —É–≤—ñ–º–∫–Ω–µ–Ω–æ!", reply_markup=main_keyboard())

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    data["last_command"] = "stop_all"
    save_data(data)
    await update.message.reply_text("‚úÖ –ó–∞–ø–∞–ª–µ–Ω–Ω—è/–°—Ç–∞—Ä—Ç–µ—Ä –≤–∏–º–∫–Ω–µ–Ω–æ!", reply_markup=main_keyboard())

async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        url = f"https://api.openweathermap.org/data/2.5/weather?q={CITY}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ua"
        res = requests.get(url)
        w = res.json()
        desc = w['weather'][0]['description']
        temp = w['main']['temp']
        await update.message.reply_text(f"üå§ –ü–æ–≥–æ–¥–∞ —É {CITY}:\n{desc.capitalize()}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp} ¬∞C", reply_markup=main_keyboard())
    except:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑!")

# ============ –ê–í–¢–û–ó–í–Ü–¢ ============
async def morning_report(app):
    while True:
        now = datetime.now()
        if now.hour == 7 and now.minute == 0:
            data = load_data()
            msg = (
                "üåÖ –î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!\n"
                f"‚õΩ –ó–∞–ª–∏—à–æ–∫: {data.get('fuel_liters','–Ω/–¥')} –ª\n"
                f"üíß –°–µ—Ä–µ–¥–Ω—è –≤–∏—Ç—Ä–∞—Ç–∞: {data.get('average_consumption','–Ω/–¥')} –ª/100–∫–º\n"
                "üß∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¢–û:\n"
                f" - –ú–∞—Å–ª–æ: {data.get('service_oil','–Ω/–¥')} –∫–º\n"
                f" - –õ–∞–Ω—Ü—é–≥: {data.get('service_chain','–Ω/–¥')} –∫–º\n"
            )
            await app.bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg)
            await asyncio.sleep(60)
        await asyncio.sleep(30)

# ============ –ì–û–õ–û–í–ù–ò–ô ============
async def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("location", location))
    app.add_handler(CommandHandler("refuel", refuel))
    app.add_handler(CommandHandler("service_oil_reset", service_oil_reset))
    app.add_handler(CommandHandler("service_chain_reset", service_chain_reset))
    app.add_handler(CommandHandler("ignite", ignite))
    app.add_handler(CommandHandler("starter", starter))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CommandHandler("weather", weather))

    asyncio.create_task(morning_report(app))
    print("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    await app.run_polling()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
