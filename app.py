"""
‚úÖ HondaShadow Telegram –±–æ—Ç
‚úÖ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ PTB v21+, Python 3.13
‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª—ñ data.json
‚úÖ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ PIN
‚úÖ –ê–≤—Ç–æ–∑–≤—ñ—Ç
"""

import json
import asyncio
import logging
from datetime import datetime
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# ============== –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ==============
with open("config.json") as f:
    CONFIG = json.load(f)

TOKEN = CONFIG["TELEGRAM_TOKEN"]
PIN_CODE = CONFIG["PIN_CODE"]
OPENWEATHER_API_KEY = CONFIG["OPENWEATHER_API_KEY"]
CITY = CONFIG["CITY"]
ADMIN_CHAT_ID = int(CONFIG["ADMIN_CHAT_ID"])

DATA_FILE = "data.json"

# ============== –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ñ–∞–π–ª—É ==============
def load_data():
    try:
        with open(DATA_FILE) as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

# ============== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ==============
def main_menu():
    return ReplyKeyboardMarkup(
        [
            ["üìä –°—Ç–∞—Ç—É—Å", "‚õΩ –ó–∞–ª–∏—à–æ–∫"],
            ["üõ¢ –ó–∞–ø—Ä–∞–≤–∏–≤—Å—è", "üå§ –ü–æ–≥–æ–¥–∞"],
            ["‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è", "üß∞ –¢–û"]
        ],
        resize_keyboard=True
    )

def control_menu():
    return ReplyKeyboardMarkup(
        [
            ["üîë –£–≤—ñ–º–∫–Ω—É—Ç–∏ –∑–∞–ø–∞–ª–µ–Ω–Ω—è", "üóù –ó–∞–≤–µ—Å—Ç–∏ –¥–≤–∏–≥—É–Ω"],
            ["üõë –ó–∞–≥–ª—É—à–∏—Ç–∏ –¥–≤–∏–≥—É–Ω", "üö´ –í–∏–º–∫–Ω—É—Ç–∏ –∑–∞–ø–∞–ª–µ–Ω–Ω—è"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ],
        resize_keyboard=True
    )

def service_menu():
    return ReplyKeyboardMarkup(
        [
            ["‚ÑπÔ∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"],
            ["‚úÖ –ó–º–∞—Å—Ç–∏–≤ —Ü–µ–ø", "‚úÖ –ó–∞–º—ñ–Ω–∏–≤ –º–∞—Å–ª–æ"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ],
        resize_keyboard=True
    )

# ============== –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ==============
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π HondaShadow –±–æ—Ç üöÄ –û–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É:",
        reply_markup=main_menu()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/status - –ü–æ–≤–Ω–∏–π —Å—Ç–∞—Ç—É—Å\n"
        "/location - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏\n"
        "/refuel 5 - –î–æ–¥–∞—Ç–∏ 5 –ª\n"
        "/service_oil_reset - –°–∫–∏–Ω—É—Ç–∏ –º–∞—Å–ª–æ\n"
        "/service_chain_reset - –°–∫–∏–Ω—É—Ç–∏ –ª–∞–Ω—Ü—é–≥\n"
        "/ignite PIN - –£–≤—ñ–º–∫–Ω—É—Ç–∏ –∑–∞–ø–∞–ª–µ–Ω–Ω—è\n"
        "/starter PIN - –°—Ç–∞—Ä—Ç–µ—Ä\n"
        "/stop - –í–∏–º–∫–Ω—É—Ç–∏ –≤—Å–µ\n"
        "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    offline = "‚úÖ ESP32 ONLINE" if data.get("last_update") else "‚ùå ESP32 OFFLINE"
    msg = (
        f"{offline}\n\n"
        f"üå°Ô∏è –î–≤–∏–≥—É–Ω: {data.get('engine_temperature','–Ω/–¥')} ¬∞C\n"
        f"üå§Ô∏è –ü–æ–≤—ñ—Ç—Ä—è: {data.get('air_temperature','–Ω/–¥')} ¬∞C\n"
        f"‚õΩ –ó–∞–ª–∏—à–æ–∫: {data.get('fuel_liters','–Ω/–¥')} –ª\n"
        f"üíß –°–µ—Ä–µ–¥–Ω—è –≤–∏—Ç—Ä–∞—Ç–∞: {data.get('average_consumption','–Ω/–¥')} –ª/100–∫–º\n"
        f"üöÄ –ó–∞–ø–∞—Å —Ö–æ–¥—É: {data.get('range_km','–Ω/–¥')} –∫–º\n"
        f"üìç –°–µ—Å—ñ—è: {data.get('session_distance','–Ω/–¥')} –∫–º\n"
        f"üõ£Ô∏è –ó–∞–≥–∞–ª—å–Ω–∏–π: {data.get('total_distance','–Ω/–¥')} –∫–º"
    )
    await update.message.reply_text(msg, reply_markup=main_menu())
    if data.get("latitude") and data.get("longitude"):
        await context.bot.send_location(
            chat_id=update.effective_chat.id,
            latitude=data["latitude"],
            longitude=data["longitude"]
        )

async def location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    if data.get("latitude") and data.get("longitude"):
        await context.bot.send_location(
            chat_id=update.effective_chat.id,
            latitude=data["latitude"],
            longitude=data["longitude"]
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.")

async def refuel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π: /refuel 5")
        return
    try:
        liters = float(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!")
        return
    data = load_data()
    data["fuel_liters"] = data.get("fuel_liters", 0) + liters
    save_data(data)
    await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ {liters} –ª!", reply_markup=main_menu())

async def ignite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1 or context.args[0] != PIN_CODE:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π PIN!")
        return
    data = load_data()
    data["last_command"] = "start_ignition"
    save_data(data)
    await update.message.reply_text("‚úÖ –ó–∞–ø–∞–ª–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ!", reply_markup=main_menu())

async def starter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1 or context.args[0] != PIN_CODE:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π PIN!")
        return
    data = load_data()
    data["last_command"] = "start_starter"
    save_data(data)
    await update.message.reply_text("‚úÖ –°—Ç–∞—Ä—Ç–µ—Ä —É–≤—ñ–º–∫–Ω–µ–Ω–æ!", reply_markup=main_menu())

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    data["last_command"] = "stop_all"
    save_data(data)
    await update.message.reply_text("‚úÖ –ó–∞–ø–∞–ª–µ–Ω–Ω—è —ñ —Å—Ç–∞—Ä—Ç–µ—Ä –≤–∏–º–∫–Ω–µ–Ω–æ!", reply_markup=main_menu())

async def service_oil_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    data["service_oil"] = 0
    save_data(data)
    await update.message.reply_text("‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –º–∞—Å–ª–∞ —Å–∫–∏–Ω—É—Ç–æ!", reply_markup=main_menu())

async def service_chain_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    data["service_chain"] = 0
    save_data(data)
    await update.message.reply_text("‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ª–∞–Ω—Ü—é–≥–∞ —Å–∫–∏–Ω—É—Ç–æ!", reply_markup=main_menu())

async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        url = f"https://api.openweathermap.org/data/2.5/weather?q={CITY}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ua"
        res = requests.get(url)
        w = res.json()
        desc = w['weather'][0]['description']
        temp = w['main']['temp']
        await update.message.reply_text(f"üå§ –ü–æ–≥–æ–¥–∞ —É {CITY}:\n{desc.capitalize()}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp} ¬∞C", reply_markup=main_menu())
    except:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑!")

async def main():
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("location", location))
    app.add_handler(CommandHandler("refuel", refuel))
    app.add_handler(CommandHandler("ignite", ignite))
    app.add_handler(CommandHandler("starter", starter))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CommandHandler("service_oil_reset", service_oil_reset))
    app.add_handler(CommandHandler("service_chain_reset", service_chain_reset))
    app.add_handler(CommandHandler("weather", weather))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
