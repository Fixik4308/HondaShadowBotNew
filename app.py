import os
import sqlite3
import json
import requests
import logging
import pytz
from datetime import datetime, timedelta

from flask import Flask, request, jsonify
from apscheduler.schedulers.background import BackgroundScheduler
from telegram import (
    Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton,
    InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler, CallbackQueryHandler
)

# ==========  CONFIG  ==========
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "7997519934:AAGuQH9UbjnTytxe9iGe5m53xXiwdImI8p0")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "587618394"))
ESP32_DEVICE_ID = os.getenv("ESP32_DEVICE_ID", "fixik4308")
MASTER_PIN = os.getenv("MASTER_PIN", "8748")
OPENWEATHER_API = os.getenv("OPENWEATHER_API", "1fc7aa0291a70d68f04424895faf1f5a")
TIMEZONE = os.getenv("TZ", "Europe/Kyiv")
DB_FILE = "hondashadow.db"

# ==========  FLASK APP ==========
app = Flask(__name__)
bot_app = None  # set later after Application init

# ==========  DATABASE  ==========

def init_db():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    # –¢–µ–ª–µ–º–µ—Ç—Ä—ñ—è
    c.execute('''
        CREATE TABLE IF NOT EXISTS telemetry (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            device_id TEXT,
            engine_temperature REAL,
            air_temperature REAL,
            latitude REAL,
            longitude REAL,
            fuel_pulses REAL,
            fuel_liters REAL,
            dailyDistance REAL,
            totalDistance REAL,
            dailyAvgConsumption REAL,
            totalAvgConsumption REAL,
            distanceRemCharge REAL,
            batteryVoltage REAL,
            batteryAkkVoltage REAL
        )
    ''')
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ü–Ü–ù, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, –ø—Ä–æ–±—ñ–≥)
    c.execute('''
        CREATE TABLE IF NOT EXISTS settings (
            key TEXT PRIMARY KEY,
            value TEXT
        )
    ''')
    # –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è ESP32
    c.execute('''
        CREATE TABLE IF NOT EXISTS commands (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            device_id TEXT,
            command_type TEXT,
            value TEXT,
            executed INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

def ensure_telemetry_columns():
    required_cols = {
        'dailyDistance': 'REAL',
        'totalDistance': 'REAL',
        'dailyAvgConsumption': 'REAL',
        'totalAvgConsumption': 'REAL',
        'distanceRemCharge': 'REAL',
        'batteryVoltage': 'REAL',
        'batteryAkkVoltage': 'REAL',
    }
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("PRAGMA table_info(telemetry)")
    columns = [row[1] for row in c.fetchall()]
    for col, col_type in required_cols.items():
        if col not in columns:
            print(f"Adding column {col} ({col_type})")
            c.execute(f"ALTER TABLE telemetry ADD COLUMN {col} {col_type}")
    conn.commit()
    conn.close()

def save_telemetry(data):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''
        INSERT INTO telemetry (
            device_id, engine_temperature, air_temperature,
            latitude, longitude, fuel_pulses, fuel_liters,
            dailyDistance, totalDistance, dailyAvgConsumption,
            totalAvgConsumption, distanceRemCharge, batteryVoltage,
            batteryAkkVoltage
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        data.get('device_id'), data.get('engine_temperature'),
        data.get('air_temperature'), data.get('latitude'),
        data.get('longitude'), data.get('fuel_pulses'),
        data.get('fuel_liters'), data.get('dailyDistance'),
        data.get('totalDistance'), data.get('dailyAvgConsumption'),
        data.get('totalAvgConsumption'), data.get('distanceRemCharge'),
        data.get('batteryVoltage'), data.get('batteryAkkVoltage')
    ))
    conn.commit()
    conn.close()

def get_last_telemetry():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('SELECT * FROM telemetry ORDER BY id DESC LIMIT 1')
    row = c.fetchone()
    conn.close()
    if not row:
        return None
    return {
        "id": row[0],
        "timestamp": row[1],
        "device_id": row[2],
        "engine_temperature": row[3],
        "air_temperature": row[4],
        "latitude": row[5],
        "longitude": row[6],
        "fuel_pulses": row[7],
        "fuel_liters": row[8],
        "dailyDistance": row[9],
        "totalDistance": row[10],
        "dailyAvgConsumption": row[11],
        "totalAvgConsumption": row[12],
        "distanceRemCharge": row[13],
        "batteryVoltage": row[14],
        "batteryAkkVoltage": row[15]
    }

def add_command(cmd_type, value=""):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''
        INSERT INTO commands (device_id, command_type, value, executed)
        VALUES (?, ?, ?, 0)
    ''', (ESP32_DEVICE_ID, cmd_type, value))
    conn.commit()
    conn.close()

def get_unexecuted_commands():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''
        SELECT id, command_type, value FROM commands
        WHERE executed=0 AND device_id=?
    ''', (ESP32_DEVICE_ID,))
    rows = c.fetchall()
    conn.close()
    cmds = []
    for row in rows:
        cmds.append({
            "id": row[0],
            "command_type": row[1],
            "value": row[2]
        })
    return cmds

def ack_command(command_id):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('UPDATE commands SET executed=1 WHERE id=?', (command_id,))
    conn.commit()
    conn.close()

def save_setting(key, value):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)', (key, str(value)))
    conn.commit()
    conn.close()

def get_setting(key, default=None):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('SELECT value FROM settings WHERE key=?', (key,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else default

# ==========  WEATHER  ==========
def get_weather(lat, lon):
    try:
        url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&units=metric&lang=ua&appid={OPENWEATHER_API}"
        r = requests.get(url)
        w = r.json()
        return f"üå§ {w['weather'][0]['description'].capitalize()}, {w['main']['temp']}¬∞C, –í–æ–ª–æ–≥—ñ—Å—Ç—å: {w['main']['humidity']}%"
    except Exception as e:
        return "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É."

# ==========  TELEGRAM BOT ==========

HEAD_MENU = [
    [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞")],
    [KeyboardButton("‚õΩÔ∏è –î–∏–∑–µ–ª—å"), KeyboardButton("üõµ –ü—Ä–æ–±—ñ–≥")],
    [KeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è"), KeyboardButton("üß∞ –¢–û")],
    [KeyboardButton("üõ† –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
]
FUEL_MENU = [
    [KeyboardButton("üõ¢ –ó–∞–ª–∏—à–æ–∫"), KeyboardButton("‚õΩ –ó–∞–ø—Ä–∞–≤–∏–≤—Å—è")],
    [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
]
MANAGE_MENU = [
    [KeyboardButton("üîë –£–≤—ñ–º–∫–Ω—É—Ç–∏ –∑–∞–ø–∞–ª–µ–Ω–Ω—è"), KeyboardButton("üóù –ó–∞–≤–µ—Å—Ç–∏ –¥–≤–∏–≥—É–Ω")],
    [KeyboardButton("üö´ –í–∏–º–∫–Ω—É—Ç–∏ –∑–∞–ø–∞–ª–µ–Ω–Ω—è"), KeyboardButton("üõë –ó–∞–≥–ª—É—à–∏—Ç–∏ –¥–≤–∏–≥—É–Ω")],
    [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
]
SERVICE_MENU = [
    [KeyboardButton("‚ÑπÔ∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")],
    [KeyboardButton("‚úÖ –ó–º–∞—Å—Ç–∏–≤ —Ü–µ–ø"), KeyboardButton("‚úÖ –ó–∞–º—ñ–Ω–∏–≤ –º–∞—Å–ª–æ")],
    [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
]
SETTING_MENU = [
    [KeyboardButton("üßÆ –û–±–Ω—É–ª–∏—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏")],
    [KeyboardButton("üåö –ï–Ω–µ—Ä–≥–æ–∑–±–µ—Ä—ñ–≥–∞—é—á–∏–π —Ä–µ–∂–∏–º"), KeyboardButton("üåû –ü—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è")],
    [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
]

def make_status_text(data):
    if not data:
        return "‚ùå –î–∞–Ω—ñ —â–µ –Ω–µ –Ω–∞–¥—ñ–π—à–ª–∏ –≤—ñ–¥ –ø—Ä–∏—Å—Ç—Ä–æ—é."
    text = (
        f"üìä <b>–°—Ç–∞—Ç—É—Å Honda Shadow:</b>\n"
        f"\n"
        f"üõ† <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–≤–∏–≥—É–Ω–∞:</b> {data['engine_temperature']:.1f}¬∞C\n"
        f"üå° <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–≤—ñ—Ç—Ä—è:</b> {data['air_temperature']:.1f}¬∞C\n"
        f"\n"
        f"‚ö°Ô∏è <b>–ó–∞—Ä—è–¥ –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∞:</b> {data['batteryAkkVoltage']:.2f} V\n"
        f"‚ö°Ô∏è <b>–ó–∞—Ä—è–¥ 18650:</b> {data['batteryVoltage']:.2f} V\n"
        f"\n"
        f"‚õΩ <b>–ó–∞–ª–∏—à–æ–∫ –ø–∞–ª—å–Ω–æ–≥–æ:</b> {data['fuel_liters']:.2f} –ª\n"
        f"üõµ <b>–ü—Ä–æ–±—ñ–≥ —Å—å–æ–≥–æ–¥–Ω—ñ: </b> {data['dailyDistance']:.2f} –∫–º\n"
        f"üõ¢ <b>–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑—Ö—ñ–¥: </b> {data['totalAvgConsumption']:.2f} –ª/100–∫–º\n"
        f"üõ£ <b>–ü—Ä–æ—ó—Ö–∞—Ç–∏ –º–æ–∂–Ω–∞ —â–µ: </b> {data['distanceRemCharge']:.2f} –∫–º\n"
        f"\n"
        f"üìç <b>GPS:</b> https://maps.google.com/?q={data['latitude']},{data['longitude']}"
    )
    return text

async def delete_message_job(context: ContextTypes.DEFAULT_TYPE):
    chat_id, message_id = context.job.data
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception:
        pass

async def reply_and_delete(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, html: bool = False, **kwargs):
    if html:
        msg = await update.message.reply_html(text, **kwargs)
    else:
        msg = await update.message.reply_text(text, **kwargs)
    context.job_queue.run_once(delete_message_job, when=300, data=(msg.chat_id, msg.message_id))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text( 
        "–í—ñ—Ç–∞—é! –Ø HiSha.\n–ì–æ—Ç–æ–≤a —Ä–æ–∑–ø–æ—á–∞—Ç–∏:",
        reply_markup=ReplyKeyboardMarkup(HEAD_MENU, resize_keyboard=True)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await reply_and_delete(update, context, 
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/status ‚Äî –í—Å—è —ñ–Ω—Ñ–æ\n"
        "/location ‚Äî –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏\n"
        "/refuel X ‚Äî –î–æ–¥–∞—Ç–∏ X –ª\n"
        "/service_oil_reset ‚Äî –°–∫–∏–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –º–∞—Å–ª–∞\n"
        "/service_chain_reset ‚Äî –°–∫–∏–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Ü–µ–ø—É\n"
        "/ignite ‚Äî –ó–∞–ø–∞–ª–µ–Ω–Ω—è (–ü–Ü–ù)\n"
        "/starter ‚Äî –°—Ç–∞—Ä—Ç–µ—Ä (–ü–Ü–ù)\n"
        "/stop ‚Äî –í–∏–º–∫–Ω—É—Ç–∏ –≤—Å–µ\n"
        "/reset_all ‚Äî –ó–±—Ä–æ—Å(–ü–Ü–ù)\n"
        "/power_save_on ‚Äî –£–≤—ñ–º–∫–Ω—É—Ç–∏ –µ–Ω–µ—Ä–≥–æ–∑–±–µ—Ä—ñ–≥–∞—é—á–∏–π —Ä–µ–∂–∏–º(–ü–Ü–ù)\n"
        "/power_save_off ‚Äî –í–∏–º–∫–Ω—É—Ç–∏ –µ–Ω–µ—Ä–≥–æ–∑–±–µ—Ä—ñ–≥–∞—é—á–∏–π —Ä–µ–∂–∏–º(–ü–Ü–ù)\n"
        "/help ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = get_last_telemetry()
    await reply_and_delete(update, context, make_status_text(data), html=True)

async def location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = get_last_telemetry()
    if not data:
        await reply_and_delete(update, context, "‚ùå –î–∞–Ω—ñ —â–µ –Ω–µ –Ω–∞–¥—ñ–π—à–ª–∏.")
        return
    await update.message.reply_location(data['latitude'], data['longitude'])

async def refuel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        liters = float(context.args[0])
        add_command("refuel", str(liters))
        await reply_and_delete(update, context, f"‚úÖ –ó–∞–ø—Ä–∞–≤–∫–∞ –Ω–∞ {liters} –ª –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏—Å—Ç—Ä–æ—é.")
    except Exception:
        await reply_and_delete(update, context, "‚ùóÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /refuel 5")

async def ignite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await reply_and_delete(update, context, "–í–≤–µ–¥—ñ—Ç—å PIN –¥–ª—è –∑–∞–ø—É—Å–∫—É –∑–∞–ø–∞–ª–µ–Ω–Ω—è:")
    context.user_data['awaiting_pin'] = 'ignite'

async def starter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await reply_and_delete(update, context, "–í–≤–µ–¥—ñ—Ç—å PIN –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å—Ç–∞—Ä—Ç–µ—Ä–∞:")
    context.user_data['awaiting_pin'] = 'starter'

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    add_command("stop_ignition")
    add_command("stop_starter")
    await reply_and_delete(update, context, "‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤–∏–º–∫–Ω–µ–Ω–Ω—è –∑–∞–ø–∞–ª–µ–Ω–Ω—è —Ç–∞ —Å—Ç–∞—Ä—Ç–µ—Ä–∞.")

async def reset_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await reply_and_delete(update, context, "–í–≤–µ–¥—ñ—Ç—å PIN –¥–ª—è –∑–±—Ä–æ—Å—É –∑–Ω–∞—á–µ–Ω—å:")
    context.user_data['awaiting_pin'] = 'reset_all'

async def power_save_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await reply_and_delete(update, context, "–í–≤–µ–¥—ñ—Ç—å PIN –¥–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥–æ–∑–±–µ—Ä—ñ–≥–∞—é—á–æ–≥–æ —Ä–µ–∂–∏–º—É:")
    context.user_data['awaiting_pin'] = 'power_save_on'

async def power_save_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await reply_and_delete(update, context, "–í–≤–µ–¥—ñ—Ç—å PIN –¥–ª—è –≤–∏–º–∫–Ω–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥–æ–∑–±–µ—Ä—ñ–≥–∞—é—á–æ–≥–æ —Ä–µ–∂–∏–º—É:")
    context.user_data['awaiting_pin'] = 'power_save_off'

async def service_oil_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_setting('oil_last_reset', datetime.now(pytz.timezone(TIMEZONE)).isoformat())
    await reply_and_delete(update, context, "‚úÖ –õ—ñ—á–∏–ª—å–Ω–∏–∫ –º–∞—Å–ª–∞ —Å–∫–∏–Ω—É—Ç–æ!")

async def service_chain_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_setting('chain_last_reset', datetime.now(pytz.timezone(TIMEZONE)).isoformat())
    await reply_and_delete(update, context, "‚úÖ –õ—ñ—á–∏–ª—å–Ω–∏–∫ –ª–∞–Ω—Ü—é–≥–∞ —Å–∫–∏–Ω—É—Ç–æ!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–°—Ç–∞—Ä—Ç üöÄ":
        await start(update, context)
    elif text == "üìä –°—Ç–∞—Ç—É—Å":
        await status(update, context)
    elif text == "üõµ –ü—Ä–æ–±—ñ–≥":
        data = get_last_telemetry()
        if data:
           await reply_and_delete(update, context, f"üèç –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–±—ñ–≥: {data['totalDistance']:.2f} –∫–º")
           await reply_and_delete(update, context, f"üõµ –ü—Ä–æ–±—ñ–≥ —Å—å–æ–≥–æ–¥–Ω—ñ: {data['dailyDistance']:.2f} –∫–º")
        else:
            await reply_and_delete(update, context, "‚ùå –î–∞–Ω—ñ —â–µ –Ω–µ –Ω–∞–¥—ñ–π—à–ª–∏.")
    elif text == "‚õΩÔ∏è –î–∏–∑–µ–ª—å": 
        await reply_and_delete(update, context, "–ú–µ–Ω—é –ø–∞–ª—å–Ω–æ–≥–æ:", reply_markup=ReplyKeyboardMarkup(FUEL_MENU, resize_keyboard=True))
    elif text == "üõ¢ –ó–∞–ª–∏—à–æ–∫":
        data = get_last_telemetry()
        if data:
           await reply_and_delete(update, context, f"üõ¢ –î–∏–∑–µ–ª—å: {data['fuel_liters']:.2f} –ª")
           await reply_and_delete(update, context, f"‚ö°Ô∏è –Ü–º–ø—É–ª—å—Å–∏: {data['fuel_pulses']}")
           await reply_and_delete(update, context, f"‚õΩÔ∏è –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑—Ö—ñ–¥: {data['totalAvgConsumption']:.2f} –ª/100 –∫–º")
           await reply_and_delete(update, context, f"‚õΩÔ∏è –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑—Ö—ñ–¥ —Å—å–æ–≥–æ–¥–Ω—ñ: {data['dailyAvgConsumption']:.2f} –ª/100 –∫–º")
           await reply_and_delete(update, context, f"üõ£ –ü—Ä–æ—ó—Ö–∞—Ç–∏ –º–æ–∂–Ω–∞ —â–µ: {data['distanceRemCharge']:.2f} –∫–º")
        else:
            await reply_and_delete(update, context, "‚ùå –î–∞–Ω—ñ —â–µ –Ω–µ –Ω–∞–¥—ñ–π—à–ª–∏.")
    elif context.user_data.get('awaiting_refuel'):
        try:
            liters = float(text.replace(',', '.'))  # –¥–æ–∑–≤–æ–ª—è—î–º–æ 1.5 –∞–±–æ 1,5
            add_command("refuel", str(liters))
            await reply_and_delete(update, context, f"‚úÖ –ó–∞–ø—Ä–∞–≤–∫–∞ –Ω–∞ {liters} –ª –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏—Å—Ç—Ä–æ—é.")
        except ValueError:
            await reply_and_delete(update, context, "‚ùóÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ‚Äî –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 5 –∞–±–æ 1.5")
        finally:
            context.user_data.pop('awaiting_refuel', None)
        return
    elif text == "‚õΩ –ó–∞–ø—Ä–∞–≤–∏–≤—Å—è":
        context.user_data['awaiting_refuel'] = True
        await reply_and_delete(update, context, "–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ—Ç—Ä—ñ–≤:")
    elif text == "üå§ –ü–æ–≥–æ–¥–∞":
        data = get_last_telemetry()
        if data:
            weather = get_weather(data['latitude'], data['longitude'])
            await reply_and_delete(update, context, weather)
        else:
            await reply_and_delete(update, context, "‚ùå –î–∞–Ω—ñ —â–µ –Ω–µ –Ω–∞–¥—ñ–π—à–ª–∏.")
    elif text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è":
        await reply_and_delete(update, context, "–ú–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è:", reply_markup=ReplyKeyboardMarkup(MANAGE_MENU, resize_keyboard=True))
    elif text == "üõ† –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è":
        await reply_and_delete(update, context, "–ú–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è:", reply_markup=ReplyKeyboardMarkup(SETTING_MENU, resize_keyboard=True))
    elif text == "üß∞ –¢–û":
        await reply_and_delete(update, context, "–ú–µ–Ω—é –¢–û:", reply_markup=ReplyKeyboardMarkup(SERVICE_MENU, resize_keyboard=True))
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await reply_and_delete(update, context, "–ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardMarkup(HEAD_MENU, resize_keyboard=True))
    elif text == "üßÆ –û–±–Ω—É–ª–∏—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏":
        await reset_all(update, context)
    elif text == "üåö –ï–Ω–µ—Ä–≥–æ–∑–±–µ—Ä—ñ–≥–∞—é—á–∏–π —Ä–µ–∂–∏–º":
        await power_save_on(update, context)
    elif text == "üåû –ü—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è":
        await power_save_off(update, context)
    elif text == "üîë –£–≤—ñ–º–∫–Ω—É—Ç–∏ –∑–∞–ø–∞–ª–µ–Ω–Ω—è":
        await ignite(update, context)
    elif text == "üóù –ó–∞–≤–µ—Å—Ç–∏ –¥–≤–∏–≥—É–Ω":
        await starter(update, context)
    elif text == "üõë –ó–∞–≥–ª—É—à–∏—Ç–∏ –¥–≤–∏–≥—É–Ω":
        await stop(update, context)
    elif text == "üö´ –í–∏–º–∫–Ω—É—Ç–∏ –∑–∞–ø–∞–ª–µ–Ω–Ω—è":
        add_command("stop_ignition")
        await reply_and_delete(update, context, "‚úÖ –ó–∞–ø–∞–ª–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ.")
    elif text == "‚ÑπÔ∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è":
        oil = get_setting('oil_last_reset', '–ù—ñ–∫–æ–ª–∏')
        chain = get_setting('chain_last_reset', '–ù—ñ–∫–æ–ª–∏')
        await reply_and_delete(update, context, f"üõ¢ –û—Å—Ç–∞–Ω–Ω—è –∑–∞–º—ñ–Ω–∞ –º–∞—Å–ª–∞: {oil}\nüîó –û—Å—Ç–∞–Ω–Ω—è –º–∞—Å—Ç–∫–∞ –ª–∞–Ω—Ü—é–≥–∞: {chain}")
    elif text == "‚úÖ –ó–º–∞—Å—Ç–∏–≤ —Ü–µ–ø":
        await service_chain_reset(update, context)
    elif text == "‚úÖ –ó–∞–º—ñ–Ω–∏–≤ –º–∞—Å–ª–æ":
        await service_oil_reset(update, context)
    else:
        if context.user_data.get('awaiting_pin'):
            pin_action = context.user_data.pop('awaiting_pin')
            if text.strip() == MASTER_PIN:
                if pin_action == 'ignite':
                    add_command("start_ignition", MASTER_PIN)
                    await reply_and_delete(update, context, "‚úÖ –ó–∞–ø–∞–ª–µ–Ω–Ω—è –≤–≤—ñ–º–∫–Ω–µ–Ω–æ!")
                elif pin_action == 'starter':
                    add_command("start_starter", MASTER_PIN)
                    await reply_and_delete(update, context, "‚úÖ –°—Ç–∞—Ä—Ç–µ—Ä –≤–≤—ñ–º–∫–Ω–µ–Ω–æ!")
                elif pin_action == 'reset_all':
                    add_command("reset_all", MASTER_PIN)
                    await reply_and_delete(update, context, "‚úÖ –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ —Å–∫–∏–Ω—É—Ç–æ!")
                elif pin_action == 'power_save_on':
                    add_command("power_save_on", MASTER_PIN)
                    await reply_and_delete(update, context, "‚úÖ –°–ø–∏–º–æ!")
                elif pin_action == 'power_save_off':
                    add_command("power_save_off", MASTER_PIN)
                    await reply_and_delete(update, context, "‚úÖ –ü—Ä–æ–∫–∏–Ω—É–ª–∞—Å—å!")
            else:
                await reply_and_delete(update, context, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π PIN.")
        else:
            await reply_and_delete(update, context, "‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ /help")

# ==========  ESP32 API ==========
@app.route('/esp32_push', methods=['POST'])
def esp32_push():
    data = request.json
    save_telemetry(data)
    return jsonify({"status": "ok"})

@app.route('/esp32_push/commands', methods=['GET'])
def esp32_get_commands():
    device_id = request.args.get('device_id')
    cmds = get_unexecuted_commands()
    return jsonify({"commands": cmds})

@app.route('/esp32_push/commands/ack', methods=['POST'])
def esp32_ack_command():
    data = request.json
    ack_command(data['command_id'])
    return jsonify({"status": "acknowledged"})

# ==========  AUTOREPORT ==========
def send_daily_report():
    data = get_last_telemetry()
    if data:
        weather = get_weather(data['latitude'], data['longitude'])
        oil = get_setting('oil_last_reset', '–ù—ñ–∫–æ–ª–∏')
        chain = get_setting('chain_last_reset', '–ù—ñ–∫–æ–ª–∏')
        text = (
            "üïä <b>–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç</b>\n"
            + make_status_text(data) + "\n\n"
            + weather + "\n\n"
            + f"üõ¢ –û—Å—Ç–∞–Ω–Ω—è –∑–∞–º—ñ–Ω–∞ –º–∞—Å–ª–∞: {oil}\nüîó –û—Å—Ç–∞–Ω–Ω—è –º–∞—Å—Ç–∫–∞ –ª–∞–Ω—Ü—é–≥–∞: {chain}"
        )
        try:
            import asyncio
            loop = asyncio.get_event_loop()
            if loop.is_running():
                asyncio.create_task(bot_app.bot.send_message(chat_id=ADMIN_CHAT_ID, text=text, parse_mode='HTML'))
            else:
                loop.run_until_complete(bot_app.bot.send_message(chat_id=ADMIN_CHAT_ID, text=text, parse_mode='HTML'))
        except Exception as e:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç:", e)

def setup_scheduler():
    scheduler = BackgroundScheduler(timezone=TIMEZONE)
    scheduler.add_job(send_daily_report, 'cron', hour=8, minute=0)
    scheduler.start()

# ==========  MAIN ==========
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    init_db()
    ensure_telemetry_columns()
    setup_scheduler()
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    bot_app = application

    # handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("location", location))
    application.add_handler(CommandHandler("refuel", refuel))
    application.add_handler(CommandHandler("ignite", ignite))
    application.add_handler(CommandHandler("starter", starter))
    application.add_handler(CommandHandler("stop", stop))
    application.add_handler(CommandHandler("reset_all", reset_all))
    application.add_handler(CommandHandler("power_save_on", power_save_on))
    application.add_handler(CommandHandler("power_save_off", power_save_off))
    application.add_handler(CommandHandler("service_oil_reset", service_oil_reset))
    application.add_handler(CommandHandler("service_chain_reset", service_chain_reset))
    application.add_handler(MessageHandler(filters.TEXT, handle_message))

    # Flask+PTB in one process (webhook –Ω–∞ Heroku/Render, –∞–±–æ polling)
    import threading
    def run_flask():
        app.run(host='0.0.0.0', port=int(os.environ.get("PORT", 5000)), threaded=True)

    threading.Thread(target=run_flask).start()
    application.run_polling(allowed_updates=Update.ALL_TYPES)
