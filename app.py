import logging
import json
import os
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

import aiohttp
from dotenv import load_dotenv

# ---------- –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –°–ï–ö–†–ï–¢–Ü–í ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")
PIN_CODE = os.getenv("PIN_CODE")  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: '1234'

DATA_FILE = "esp32_data.json"
SERVICE_FILE = "service_status.json"

logging.basicConfig(level=logging.INFO)

# ---------- FSM STATES ----------
class RefuelStates(StatesGroup):
    waiting_liters = State()

class PinStates(StatesGroup):
    waiting_pin_ignite = State()
    waiting_pin_starter = State()

# ---------- –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ----------
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# ---------- –•–ï–õ–ü–ï–†–ò –î–õ–Ø –ó–ë–ï–†–Ü–ì–ê–ù–ù–Ø ----------
def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except Exception:
        return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_service():
    try:
        with open(SERVICE_FILE, "r") as f:
            return json.load(f)
    except Exception:
        return {
            "oil_km": 0,
            "chain_km": 0,
            "oil_last": str(datetime.now().date()),
            "chain_last": str(datetime.now().date())
        }

def save_service(service):
    with open(SERVICE_FILE, "w") as f:
        json.dump(service, f, ensure_ascii=False, indent=2)

# ---------- –ö–ù–û–ü–ö–ò ----------
def main_menu():
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton(text="‚õΩ –ó–∞–ª–∏—à–æ–∫")],
            [KeyboardButton(text="üõ¢ –ó–∞–ø—Ä–∞–≤–∏–≤—Å—è"), KeyboardButton(text="üå§ –ü–æ–≥–æ–¥–∞")],
            [KeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è"), KeyboardButton(text="üß∞ –¢–û")]
        ],
        resize_keyboard=True
    )
    return kb

def management_menu():
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîë –£–≤—ñ–º–∫–Ω—É—Ç–∏ –∑–∞–ø–∞–ª–µ–Ω–Ω—è"), KeyboardButton(text="üóù –ó–∞–≤–µ—Å—Ç–∏ –¥–≤–∏–≥—É–Ω")],
            [KeyboardButton(text="üõë –ó–∞–≥–ª—É—à–∏—Ç–∏ –¥–≤–∏–≥—É–Ω"), KeyboardButton(text="üö´ –í–∏–º–∫–Ω—É—Ç–∏ –∑–∞–ø–∞–ª–µ–Ω–Ω—è")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    return kb

def service_menu():
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ÑπÔ∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")],
            [KeyboardButton(text="‚úÖ –ó–º–∞—Å—Ç–∏–≤ —Ü–µ–ø"), KeyboardButton(text="‚úÖ –ó–∞–º—ñ–Ω–∏–≤ –º–∞—Å–ª–æ")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    return kb

def cancel_menu():
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚¨ÖÔ∏è –í—ñ–¥–º—ñ–Ω–∏—Ç–∏")]
        ],
        resize_keyboard=True
    )
    return kb

# ---------- –î–û–ü–û–ú–û–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ----------
def get_status_text(data, service):
    if not data:
        return "<b>–î–∞–Ω–∏—Ö —â–µ –Ω–µ–º–∞—î!</b>"

    offline = ""
    last_update = data.get("last_update")
    if last_update:
        dt = datetime.strptime(last_update, "%Y-%m-%d %H:%M:%S")
        if datetime.now() - dt > timedelta(minutes=3):
            offline = "\n‚ö†Ô∏è <b>ESP32 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –±—ñ–ª—å—à–µ 3—Ö —Ö–≤)</b>\n"

    status = (
        f"üîã <b>–°—Ç–∞—Ç—É—Å –º–æ—Ç–æ—Ü–∏–∫–ª–∞</b>:\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–≤–∏–≥—É–Ω–∞: <b>{data.get('engine_temp', '---')}¬∞C</b>\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–≤—ñ—Ç—Ä—è: <b>{data.get('air_temp', '---')}¬∞C</b>\n"
        f"‚õΩ –ó–∞–ª–∏—à–æ–∫ –ø–∞–ª—å–Ω–æ–≥–æ: <b>{data.get('fuel_left', '---')} –ª</b>\n"
        f"üöó –ü—Ä–æ–±—ñ–≥ (–∑–∞–≥.): <b>{data.get('odo_total', '---')} –∫–º</b>\n"
        f"üìÜ –ü—Ä–æ–±—ñ–≥ –∑–∞ –¥–µ–Ω—å: <b>{data.get('odo_day', '---')} –∫–º</b>\n"
        f"üïë –ü—Ä–æ–±—ñ–≥ –∑–∞ —Å–µ—Å—ñ—é: <b>{data.get('odo_session', '---')} –∫–º</b>\n"
        f"‚ö° –°–µ—Ä–µ–¥–Ω—è –≤–∏—Ç—Ä–∞—Ç–∞: <b>{data.get('avg_consumption', '---')} –ª/100–∫–º</b>\n"
        f"üîã –ó–∞–ª–∏—à–æ–∫ —Ö–æ–¥—É: <b>{data.get('range_left', '---')} –∫–º</b>\n"
        f"üìç GPS: {data.get('lat', '---')}, {data.get('lon', '---')}\n"
        f"{offline}"
        f"\nüß∞ <b>–¢–û</b>:\n"
        f"üõ¢ –ú–∞—Å–ª–æ: –≤–æ—Å—Ç. <b>{service.get('oil_km', 0)} –∫–º</b>, –æ—Å—Ç–∞–Ω–Ω—è –∑–∞–º—ñ–Ω–∞: {service.get('oil_last', '-')}\n"
        f"‚õì –¶–µ–ø: –≤–æ—Å—Ç. <b>{service.get('chain_km', 0)} –∫–º</b>, –æ—Å—Ç–∞–Ω–Ω—è –∑–º–∞–∑–∫–∞: {service.get('chain_last', '-')}\n"
    )
    return status

async def get_weather(lat, lon):
    url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={WEATHER_API_KEY}&units=metric&lang=ua"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                w = await resp.json()
                text = (
                    f"üå§ <b>–ü–æ–≥–æ–¥–∞ –∑–∞—Ä–∞–∑</b>:\n"
                    f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{w['main']['temp']}¬∞C</b>\n"
                    f"–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫: <b>{w['main']['feels_like']}¬∞C</b>\n"
                    f"–¢–∏—Å–∫: <b>{w['main']['pressure']} –≥–ü–∞</b>\n"
                    f"–í–æ–ª–æ–≥—ñ—Å—Ç—å: <b>{w['main']['humidity']}%</b>\n"
                    f"–û–ø–∏—Å: <b>{w['weather'][0]['description'].capitalize()}</b>"
                )
                return text
            return "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏"

# ---------- –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î/–ö–ù–û–ü–û–ö ----------
@dp.message(Command("start"))
async def cmd_start(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer(
        "üëã –í—ñ—Ç–∞—é! –Ø Honda Shadow ESP32 –±–æ—Ç.\n"
        "–û–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∑ –º–µ–Ω—é –∞–±–æ /help –¥–ª—è –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥.",
        reply_markup=main_menu()
    )

@dp.message(Command("help"))
async def cmd_help(msg: types.Message, state: FSMContext):
    await msg.answer(
        "<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n"
        "/status ‚Äì –í—Å—è —ñ–Ω—Ñ–æ\n"
        "/location ‚Äì –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏\n"
        "/refuel 5 ‚Äì –î–æ–¥–∞—Ç–∏ 5 –ª\n"
        "/service_oil_reset ‚Äì –°–∫–∏–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –º–∞—Å–ª–∞\n"
        "/service_chain_reset ‚Äì –°–∫–∏–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ª–∞–Ω—Ü—é–≥–∞\n"
        "/ignite ‚Äì –£–≤—ñ–º–∫–Ω—É—Ç–∏ –∑–∞–ø–∞–ª–µ–Ω–Ω—è (–∑ PIN)\n"
        "/starter ‚Äì –°—Ç–∞—Ä—Ç–µ—Ä (–∑ PIN)\n"
        "/stop ‚Äì –í–∏–º–∫–Ω—É—Ç–∏ –∑–∞–ø–∞–ª–µ–Ω–Ω—è/—Å—Ç–∞—Ä—Ç–µ—Ä\n"
        "/help ‚Äì –¶–µ–π —Å–ø–∏—Å–æ–∫"
    )

@dp.message(Command("status"))
async def cmd_status(msg: types.Message, state: FSMContext):
    data = load_data()
    service = load_service()
    await msg.answer(get_status_text(data, service))

@dp.message(Command("location"))
async def cmd_location(msg: types.Message, state: FSMContext):
    data = load_data()
    if data.get("lat") and data.get("lon"):
        await msg.answer_location(latitude=float(data["lat"]), longitude=float(data["lon"]))
    else:
        await msg.answer("GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")

# ---------- FSM: –ó–∞–ø—Ä–∞–≤–∫–∞ ----------
@dp.message(F.text == "üõ¢ –ó–∞–ø—Ä–∞–≤–∏–≤—Å—è")
async def m_refuel(msg: types.Message, state: FSMContext):
    await msg.answer("–í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ—Ç—Ä—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 5.5) –∞–±–æ ‚¨ÖÔ∏è –í—ñ–¥–º—ñ–Ω–∏—Ç–∏.", reply_markup=cancel_menu())
    await state.set_state(RefuelStates.waiting_liters)

@dp.message(RefuelStates.waiting_liters)
async def process_refuel_liters(msg: types.Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –í—ñ–¥–º—ñ–Ω–∏—Ç–∏":
        await state.clear()
        await msg.answer("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu())
        return
    try:
        liters = float(msg.text.replace(",", "."))
        data = load_data()
        data["fuel_left"] = round(data.get("fuel_left", 0) + liters, 2)
        save_data(data)
        await state.clear()
        await msg.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ {liters} –ª. –ù–æ–≤–∏–π –∑–∞–ª–∏—à–æ–∫: {data['fuel_left']} –ª.", reply_markup=main_menu())
    except Exception:
        await msg.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 5.5 –∞–±–æ ‚¨ÖÔ∏è –í—ñ–¥–º—ñ–Ω–∏—Ç–∏.", reply_markup=cancel_menu())

# ---------- FSM: PIN-–∫–æ–¥ –¥–ª—è –∑–∞–ø–∞–ª–µ–Ω–Ω—è/—Å—Ç–∞—Ä—Ç–µ—Ä–∞ ----------
@dp.message(F.text == "üîë –£–≤—ñ–º–∫–Ω—É—Ç–∏ –∑–∞–ø–∞–ª–µ–Ω–Ω—è")
async def m_ignite(msg: types.Message, state: FSMContext):
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å PIN-–∫–æ–¥ –∞–±–æ ‚¨ÖÔ∏è –í—ñ–¥–º—ñ–Ω–∏—Ç–∏.", reply_markup=cancel_menu())
    await state.set_state(PinStates.waiting_pin_ignite)

@dp.message(PinStates.waiting_pin_ignite)
async def process_ignite_pin(msg: types.Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –í—ñ–¥–º—ñ–Ω–∏—Ç–∏":
        await state.clear()
        await msg.answer("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu())
        return
    if msg.text == PIN_CODE:
        await state.clear()
        await msg.answer("üîë –ó–∞–ø–∞–ª–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ!", reply_markup=main_menu())
        # –¢—É—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è ESP32
    else:
        await msg.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π PIN! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ ‚¨ÖÔ∏è –í—ñ–¥–º—ñ–Ω–∏—Ç–∏.", reply_markup=cancel_menu())

@dp.message(F.text == "üóù –ó–∞–≤–µ—Å—Ç–∏ –¥–≤–∏–≥—É–Ω")
async def m_starter(msg: types.Message, state: FSMContext):
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å PIN-–∫–æ–¥ –∞–±–æ ‚¨ÖÔ∏è –í—ñ–¥–º—ñ–Ω–∏—Ç–∏.", reply_markup=cancel_menu())
    await state.set_state(PinStates.waiting_pin_starter)

@dp.message(PinStates.waiting_pin_starter)
async def process_starter_pin(msg: types.Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –í—ñ–¥–º—ñ–Ω–∏—Ç–∏":
        await state.clear()
        await msg.answer("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu())
        return
    if msg.text == PIN_CODE:
        await state.clear()
        await msg.answer("üóù –î–≤–∏–≥—É–Ω –∑–∞–≤–µ–¥–µ–Ω–æ!", reply_markup=main_menu())
        # –¢—É—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è ESP32
    else:
        await msg.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π PIN! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ ‚¨ÖÔ∏è –í—ñ–¥–º—ñ–Ω–∏—Ç–∏.", reply_markup=cancel_menu())

# ---------- –ú–µ–Ω—é, –¢–û, –ü–æ–≥–æ–¥–∞, –°—Ç–∞—Ç—É—Å —Ç–∞ —ñ–Ω—à–µ ----------
@dp.message(F.text == "üìä –°—Ç–∞—Ç—É—Å")
async def m_status(msg: types.Message, state: FSMContext):
    data = load_data()
    service = load_service()
    await msg.answer(get_status_text(data, service))

@dp.message(F.text == "‚õΩ –ó–∞–ª–∏—à–æ–∫")
async def m_fuel(msg: types.Message, state: FSMContext):
    data = load_data()
    await msg.answer(f"‚õΩ –ó–∞–ª–∏—à–æ–∫ –ø–∞–ª—å–Ω–æ–≥–æ: <b>{data.get('fuel_left', '---')} –ª</b>")

@dp.message(F.text == "üå§ –ü–æ–≥–æ–¥–∞")
async def m_weather(msg: types.Message, state: FSMContext):
    data = load_data()
    lat, lon = data.get("lat"), data.get("lon")
    if lat and lon:
        weather = await get_weather(lat, lon)
        await msg.answer(weather)
    else:
        await msg.answer("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —â–µ –Ω–µ –≤—ñ–¥–æ–º—ñ, –Ω–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É.")

@dp.message(F.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è")
async def m_manage(msg: types.Message, state: FSMContext):
    await msg.answer("–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:", reply_markup=management_menu())

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def m_back(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu())

@dp.message(F.text == "üß∞ –¢–û")
async def m_service(msg: types.Message, state: FSMContext):
    await msg.answer("–¢–û:", reply_markup=service_menu())

@dp.message(F.text == "‚ÑπÔ∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
async def m_reminders(msg: types.Message, state: FSMContext):
    service = load_service()
    await msg.answer(
        f"üõ¢ –ú–∞—Å–ª–æ: –≤–æ—Å—Ç. {service.get('oil_km', 0)} –∫–º, –æ—Å—Ç–∞–Ω–Ω—è –∑–∞–º—ñ–Ω–∞: {service.get('oil_last', '-')}\n"
        f"‚õì –¶–µ–ø: –≤–æ—Å—Ç. {service.get('chain_km', 0)} –∫–º, –æ—Å—Ç–∞–Ω–Ω—è –∑–º–∞–∑–∫–∞: {service.get('chain_last', '-')}"
    )

@dp.message(F.text == "‚úÖ –ó–º–∞—Å—Ç–∏–≤ —Ü–µ–ø")
async def m_chain_reset(msg: types.Message, state: FSMContext):
    service = load_service()
    service["chain_km"] = 0
    service["chain_last"] = str(datetime.now().date())
    save_service(service)
    await msg.answer("‚úÖ –õ—ñ—á–∏–ª—å–Ω–∏–∫ –ª–∞–Ω—Ü—é–≥–∞ —Å–∫–∏–Ω—É—Ç–æ.")

@dp.message(F.text == "‚úÖ –ó–∞–º—ñ–Ω–∏–≤ –º–∞—Å–ª–æ")
async def m_oil_reset(msg: types.Message, state: FSMContext):
    service = load_service()
    service["oil_km"] = 0
    service["oil_last"] = str(datetime.now().date())
    save_service(service)
    await msg.answer("‚úÖ –õ—ñ—á–∏–ª—å–Ω–∏–∫ –º–∞—Å–ª–∞ —Å–∫–∏–Ω—É—Ç–æ.")

@dp.message((F.text == "üõë –ó–∞–≥–ª—É—à–∏—Ç–∏ –¥–≤–∏–≥—É–Ω") | (F.text == "üö´ –í–∏–º–∫–Ω—É—Ç–∏ –∑–∞–ø–∞–ª–µ–Ω–Ω—è"))
async def m_stop(msg: types.Message, state: FSMContext):
    await msg.answer("‚úÖ –î–≤–∏–≥—É–Ω –∑–∞–≥–ª—É—à–µ–Ω–æ/–∑–∞–ø–∞–ª–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ.", reply_markup=main_menu())

# ---------- ESP32 PUSH API (–¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤—ñ–¥ ESP32) ----------
from aiohttp import web

async def esp32_push(request):
    try:
        data = await request.json()
        data["last_update"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        save_data(data)
        return web.json_response({"status": "ok"})
    except Exception as e:
        return web.json_response({"status": "error", "detail": str(e)}, status=400)

# ---------- –ì–û–õ–û–í–ù–ò–ô –ó–ê–ü–£–°–ö (aiohttp + aiogram —Ä–∞–∑–æ–º) ----------
import asyncio

async def start_polling():
    await dp.start_polling(bot)

async def start_web():
    app = web.Application()
    app.add_routes([web.post("/esp32_push", esp32_push)])
    runner = web.AppRunner(app)
    async def start_web():
    app = web.Application()
    app.add_routes([web.post("/esp32_push", esp32_push)])
    runner = web.AppRunner(app)
    await runner.setup()
    import os
    port = int(os.environ.get("PORT", 8080))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    while True:
        await asyncio.sleep(3600)

def main():
    asyncio.run(main_async())

async def main_async():
    await asyncio.gather(
        start_polling(),
        start_web()
    )

if __name__ == "__main__":
    main()
